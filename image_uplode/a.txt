----------------------111111111111111111111--------------------
--------------->permission
<uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_SMS" />
    <uses-permission android:name="ANDROID.PERMISSION.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
	-----------------------2222222222222222222222----------------------------
--------------->dependency

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.2.0'
    implementation 'com.squareup.okhttp:okhttp:2.4.0'
    implementation 'com.google.code.gson:gson:2.6.2'
    // For API Header
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    //gif holder
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.16'
    // CardView
    implementation "androidx.cardview:cardview:1.0.0"
    // Material Design
    implementation 'com.google.android.material:material:1.0.0'
    //circle image
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    //Glide
    //implementation 'com.github.bumptech.glide:glide:4.8.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'androidx.annotation:annotation:1.0.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    //picasso
    implementation 'com.squareup.picasso:picasso:2.5.2'

    //Firebase
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    //Firebase Authentication
    //implementation 'com.google.firebase:firebase-auth:19.3.2'

    implementation 'com.google.firebase:firebase-auth:19.3.2'

    //Fb login
    implementation 'com.facebook.android:facebook-android-sdk:[5,6)'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.google.android.gms:play-services-vision:17+'
    implementation 'com.google.android.gms:play-services-auth:18.1.0'
    implementation 'com.github.GrenderG:Toasty:1.5.0'
}
---------------------------------------333333333333333333333---------------------------------------------------------------------------
------------------>	MainActivity.java

package com.wishster.myapplication;

import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.loader.content.CursorLoader;

import android.Manifest;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.content.ContentUris;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;


import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Calendar;


import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static java.security.AccessController.getContext;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.provider.MediaStore;
import android.view.View;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Response;

public class MainActivity extends AppCompatActivity {
    private String realPath="";
    private File pickedImage=null;
    ApiManager apiManager=new ApiManager();
    public static String URL = "https://domax.xyz/wishsterapp/api/";
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        pickedImage = new File(getApplicationContext().getFilesDir(), URL);
        selectImage();

    }
    private void selectImage() {

        final CharSequence[] options = { "Take Photo", "Choose from Gallery","Cancel" };
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
        builder.setTitle("Add Photo!");
        builder.setItems(options, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int item) {

                if (options[item].equals("Take Photo"))
                {

                    Intent photoCaptureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                    startActivityForResult(photoCaptureIntent, 1);
                }
                else if (options[item].equals("Choose from Gallery"))
                {
                    Intent intent = new   Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                    startActivityForResult(intent, 2);
                }
                else if (options[item].equals("Cancel")) {
                    dialog.dismiss();
                }
            }
        });
        builder.show();
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == 1) {


                final Bitmap photo = (Bitmap) data.getExtras().get("data");
                File file = savebitmap(photo);

                MultipartBody.Part filePart = MultipartBody.Part.createFormData("profile_img", file.getName(), RequestBody.create(MediaType.parse("image/*"), file));

                apiManager.service.UpdatePrfImage(filePart).enqueue(new Callback<UpdateProfileImgModel>() {
                    @Override
                    public void onResponse(Call<UpdateProfileImgModel> call, Response<UpdateProfileImgModel> response) {
                        if (response.isSuccessful()){
                            Toast.makeText(MainActivity.this, "Done", Toast.LENGTH_SHORT).show();
                        }else{

                        }
                    }

                    @Override
                    public void onFailure(Call<UpdateProfileImgModel> call, Throwable t) {
                        //loader.hideDialog();
                        Toast.makeText(MainActivity.this, "No Internet!", Toast.LENGTH_SHORT).show();

                    }
                });



            } else if (requestCode == 2) {

                if (Build.VERSION.SDK_INT < 11) {
                    realPath = RealPathUtils.getRealPathFromURI_BelowAPI11(MainActivity.this, data.getData());
                    // upload_file.setHint("Image selected");
                    uploadImg(realPath);
                }

                // SDK >= 11 && SDK < 19
                else if (Build.VERSION.SDK_INT < 19) {
                    realPath = RealPathUtils.getRealPathFromURI_API11to18(MainActivity.this, data.getData());
                    //upload_file.setHint("Image selected");
                    uploadImg(realPath);
                }

                // SDK > 19 (Android 4.4)
                else {
                    realPath = RealPathUtils.getRealPathFromURI_API19(MainActivity.this, data.getData());
                    //upload_file.setHint("Image selected");
                    uploadImg(realPath);
                }
                System.out.println("Image Path : " + realPath);

            }
        }

    }
    private File savebitmap(Bitmap bmp) {
        String extStorageDirectory = Environment.getExternalStorageDirectory().toString();
        OutputStream outStream = null;
        // String temp = null;
        File file = new File(extStorageDirectory, "temp.png");
        if (file.exists()) {
            file.delete();
            file = new File(extStorageDirectory, "temp.png");

        }

        try {
            outStream = new FileOutputStream(file);
            bmp.compress(Bitmap.CompressFormat.PNG, 100, outStream);
            outStream.flush();
            outStream.close();

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return file;
    }
    public static class RealPathUtils {

        public static String getRealPath(Context context, Uri fileUri) {
            String realPath;
            // SDK >= 11 && SDK < 19
            if (Build.VERSION.SDK_INT < 19) {
                realPath = getRealPathFromURI_API11to18(context, fileUri);
            }
            // SDK > 19 (Android 4.4) and up
            else {
                realPath = getRealPathFromURI_API19(context, fileUri);
            }
            return realPath;
        }

        public static String getRealPathFromURI_API11to18(Context context, Uri contentUri) {
            String[] proj = {MediaStore.MediaColumns.DATA};
            String result = null;

            CursorLoader cursorLoader = new CursorLoader(context, contentUri, proj, null, null, null);
            Cursor cursor = cursorLoader.loadInBackground();

            if (cursor != null) {
                int column_index = cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA);
                cursor.moveToFirst();
                result = cursor.getString(column_index);
                cursor.close();
            }
            return result;
        }

        public static String getRealPathFromURI_BelowAPI11(Context context, Uri contentUri){
            String[] proj = { MediaStore.Images.Media.DATA };
            Cursor cursor = context.getContentResolver().query(contentUri, proj, null, null, null);
            int column_index
                    = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        }

        /**
         * Get a file path from a Uri. This will get the the path for Storage Access
         * Framework Documents, as well as the _data field for the MediaStore and
         * other file-based ContentProviders.
         *
         * @param context The context.
         * @param uri     The Uri to query.
         */
        @RequiresApi(api = Build.VERSION_CODES.KITKAT)
        public static String getRealPathFromURI_API19(final Context context, final Uri uri) {
            // DocumentProvider
            if (DocumentsContract.isDocumentUri(context, uri)) {
                // ExternalStorageProvider
                if (isExternalStorageDocument(uri)) {
                    final String docId = DocumentsContract.getDocumentId(uri);
                    final String[] split = docId.split(":");
                    final String type = split[0];

                    if ("primary".equalsIgnoreCase(type)) {
                        return Environment.getExternalStorageDirectory() + "/" + split[1];
                    }
                    // non-primary
                }
                // DownloadsProvider
                else if (isDownloadsDocument(uri)) {

                    final String id = DocumentsContract.getDocumentId(uri);

                    if (!TextUtils.isEmpty(id)) {
                        if (id.startsWith("raw:")) {
                            return id.replaceFirst("raw:", "");
                        }
                        try {
                            final Uri contentUri = ContentUris.withAppendedId(
                                    Uri.parse("content://downloads/public_downloads"), Long.valueOf(id));

                            return getDataColumn(context, contentUri, null, null);
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                            return null;
                        }
                    }
                }
                // MediaProvider
                else if (isMediaDocument(uri)) {
                    final String docId = DocumentsContract.getDocumentId(uri);
                    final String[] split = docId.split(":");
                    final String type = split[0];

                    Uri contentUri = null;
                    if ("image".equals(type)) {
                        contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                    } else if ("video".equals(type)) {
                        contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                    } else if ("audio".equals(type)) {
                        contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                    }

                    final String selection = "_id=?";
                    final String[] selectionArgs = new String[]{split[1]};

                    return getDataColumn(context, contentUri, selection, selectionArgs);
                }
            }
            // MediaStore (and general)
            else if ("content".equalsIgnoreCase(uri.getScheme())) {

                // Return the remote address
                if (isGooglePhotosUri(uri))
                    return uri.getLastPathSegment();

                return getDataColumn(context, uri, null, null);
            }
            // File
            else if ("file".equalsIgnoreCase(uri.getScheme())) {
                return uri.getPath();
            }

            return null;
        }

        /**
         * Get the value of the data column for this Uri. This is useful for
         * MediaStore Uris, and other file-based ContentProviders.
         *
         * @param context       The context.
         * @param uri           The Uri to query.
         * @param selection     (Optional) Filter used in the query.
         * @param selectionArgs (Optional) Selection arguments used in the query.
         * @return The value of the _data column, which is typically a file path.
         */
        private static String getDataColumn(Context context, Uri uri, String selection,
                                            String[] selectionArgs) {

            Cursor cursor = null;
            final String column = MediaStore.MediaColumns.DATA;
            final String[] projection = {column};

            try {
                cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,
                        null);
                if (cursor != null && cursor.moveToFirst()) {
                    final int index = cursor.getColumnIndexOrThrow(column);
                    return cursor.getString(index);
                }
            } finally {
                if (cursor != null)
                    cursor.close();
            }
            return null;
        }


        /**
         * @param uri The Uri to check.
         * @return Whether the Uri authority is ExternalStorageProvider.
         */
        private static boolean isExternalStorageDocument(Uri uri) {
            return "com.android.externalstorage.documents".equals(uri.getAuthority());
        }

        /**
         * @param uri The Uri to check.
         * @return Whether the Uri authority is DownloadsProvider.
         */
        private static boolean isDownloadsDocument(Uri uri) {
            return "com.android.providers.downloads.documents".equals(uri.getAuthority());
        }

        /**
         * @param uri The Uri to check.
         * @return Whether the Uri authority is MediaProvider.
         */
        private static boolean isMediaDocument(Uri uri) {
            return "com.android.providers.media.documents".equals(uri.getAuthority());
        }

        /**
         * @param uri The Uri to check.
         * @return Whether the Uri authority is Google Photos.
         */
        private static boolean isGooglePhotosUri(Uri uri) {
            return "com.google.android.apps.photos.content".equals(uri.getAuthority());
        }
    }
    private void uploadImg(String result) {
       // loader.showDialog(Profile.this);
        //MultipartBody.Part imageBody = prepareFilePart("profile_img", pickedImage);
        MultipartBody.Part part = null;
        try {
            File file = new File(result);
            // Create a request body with file and image media type
            RequestBody fileReqBody = RequestBody.create(MediaType.parse("*/*"), file);
            // Create MultipartBody.Part using file request-body,file name and part name
            part = MultipartBody.Part.createFormData("profile_img", file.getName(), fileReqBody);
        }catch (Exception e){
            e.printStackTrace();
        }
        apiManager.service.UpdatePrfImage(part).enqueue(new Callback<UpdateProfileImgModel>() {
            @Override
            public void onResponse(Call<UpdateProfileImgModel> call, Response<UpdateProfileImgModel> response) {
                if (response.isSuccessful()){
                    Toast.makeText(MainActivity.this, "SUCCESS", Toast.LENGTH_SHORT).show();
                   // loader.hideDialog();
               /*     if (response.body().status){
                        Toast.makeText(MainActivity.this, response.body().message, Toast.LENGTH_SHORT).show();
                        if(response.body().data.profile_img != null) {

                            Glide.with(MainActivity.this).load(response.body().data.profile_img)
                                    .diskCacheStrategy(DiskCacheStrategy.NONE)
                                    .skipMemoryCache(true).into(MainActivity);
                            prefs.saveData("prf_pic", response.body().data.profile_img);
                        }
                    }else {
                        Toast.makeText(Profile.this, response.body().message, Toast.LENGTH_SHORT).show();
                    }*/

                }else{
                  //  loader.hideDialog();
                }
            }

            @Override
            public void onFailure(Call<UpdateProfileImgModel> call, Throwable t) {
              //  loader.hideDialog();
                Toast.makeText(MainActivity.this, "No Internet!", Toast.LENGTH_SHORT).show();

            }
        });

    }
}


---------------------------------------4444444444444444---------------------------------------------------------------------------
------------------>	ApiInterface.java(interface)

package com.wishster.myapplication;



import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.Field;
import retrofit2.http.FormUrlEncoded;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Multipart;
import retrofit2.http.POST;
import retrofit2.http.Part;

public interface ApiInterface {
    @Headers({
            "Accept: application/json",
            "Content-Type: application/json"
    })

    /*@POST("forget_pwd")
    Call<ForgotPasswordModel> getOtpEmail(@Body RequestBody email);

    @POST("reset_pwd")
    Call<ResetPasswordModel> resetPassword(@Body RequestBody bodyRequest);

    *//*@FormUrlEncoded
    @POST("verify_otp")
    Call<VerifyOtpModel> getVerifyOtp(@Field("email") String email,
                                      @Field("otp") String otp);*//*

    @FormUrlEncoded
    @POST("change_password")
    Call<ChangePasswordModel> setNewPassword(@Field("old_password") String old_password,
                                             @Field("new_password") String new_password);


    @POST("get_products")
    Call<ProductListModel> getProductList(@Body RequestBody bodyRequest);



    @GET("security_qtn")
    Call<ReviewQuestion> ReviewQuestion();
    @GET("profile")
    Call<ProfileModel> getProfile();
    @POST("save_security_qtn")
    Call<SaveQuestion> SaveQuestion(@Body RequestBody bodyRequest);
    @POST("login")
    Call<LoginModel> login(@Body RequestBody bodyRequest);
    @POST("social_login")
    Call<LoginModel> Social_login(@Body RequestBody bodyRequest);
    @POST("register")
    Call<ServerStatus> Register_email(@Body RequestBody bodyRequest);
    @POST("register_set_pwd")
    Call<SignUpModel> signup(@Body RequestBody bodyRequest);
    @POST("verify_otp")
    Call<VerifyOtpModel> getVerifyOtp(@Body RequestBody bodyRequest);
    @POST("update_profile")
    Call<SignUpModel> Update_profile(@Body RequestBody bodyRequest);*/

    @Multipart
    @POST("update_profile_img")
    Call<UpdateProfileImgModel> UpdatePrfImage(@Part MultipartBody.Part profile_img);



}



---------------------------------------555555555555---------------------------------------------------------------------------
------------------>	ApiManager.java




package com.wishster.myapplication;

import android.provider.SyncStateContract;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import okhttp3.Interceptor;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class ApiManager {
    public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
    public ApiInterface service;


    public ApiManager()
    {

        HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();
        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);



        OkHttpClient client= new OkHttpClient.Builder()
                .readTimeout(60, TimeUnit.SECONDS)
                .connectTimeout(120, TimeUnit.SECONDS)
                .addInterceptor(httpLoggingInterceptor)
                .addInterceptor(new Interceptor() {
                    @Override
                    public Response intercept(Chain chain) throws IOException {
                        Request original = chain.request();

                        Request request = original.newBuilder()
                                .header("Content-Type", "application/json")
                                .header("Authorization", "Bearer " +App.token)
                                .method(original.method(), original.body())
                                .build();

                        return chain.proceed(request);
                    }
                })
                .build();

        /*OkHttpClient client = new OkHttpClient.Builder()
                .addInterceptor(new BasicInterceptor("admin", "1234"))
                .build();*/
        Gson gson = new GsonBuilder()
                .setLenient()
                .create();
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(App.URL)
                .addConverterFactory(GsonConverterFactory.create(gson))
                .client(client)
                .build();

        service = retrofit.create(ApiInterface.class);
    }
}





---------------------------------------666666666666666666---------------------------------------------------------------------------
------------------>	UpdateProfileImgModel.java



package com.wishster.myapplication;

public class UpdateProfileImgModel {

    public boolean status = false;
    public String message = "";
    public UpdateProfileImgSubModel data;
}








---------------------------------------777777777777777777---------------------------------------------------------------------------
------------------>	UpdateProfileImgSubModel.java




package com.wishster.myapplication;

public class UpdateProfileImgSubModel {

    public String id = "";
    public String name = "";
    public String gender = "";
    public String email = "";
    public String mobile = "";
    public String username = "";
    public String address = "";
    public String birthday = "";
    public String profile_img = "";
    public String status = "";


}











---------------------------------------8888888888888888---------------------------------------------------------------------------
------------------>	App.java



package com.wishster.myapplication;

class App {
    public static final String URL = "https://domax.xyz/wishsterapp/api/";
    public static String token="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvZG9tYXgueHl6XC93aXNoc3RlcmFwcFwvYXBpXC9zb2NpYWxfbG9naW4iLCJpYXQiOjE1OTk3MjUxNjMsIm5iZiI6MTU5OTcyNTE2MywianRpIjoiSGxRbzVKQXhOa3F1Z2twdSIsInN1YiI6MTAsInBydiI6Ijg3ZTBhZjFlZjlmZDE1ODEyZmRlYzk3MTUzYTE0ZTBiMDQ3NTQ2YWEifQ.90w0YyRzs4ldqo3xfjslnTzUjWBa6yIGh7_UzhKfswY";
}



































